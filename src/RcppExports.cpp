// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// dn
double dn(double x, double mu, double sd);
RcppExport SEXP _rcpm_dn(SEXP xSEXP, SEXP muSEXP, SEXP sdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type sd(sdSEXP);
    rcpp_result_gen = Rcpp::wrap(dn(x, mu, sd));
    return rcpp_result_gen;
END_RCPP
}
// dmvnrmarma
arma::vec dmvnrmarma(arma::mat x, arma::rowvec mean, arma::mat sigma, bool logd);
RcppExport SEXP _rcpm_dmvnrmarma(SEXP xSEXP, SEXP meanSEXP, SEXP sigmaSEXP, SEXP logdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< bool >::type logd(logdSEXP);
    rcpp_result_gen = Rcpp::wrap(dmvnrmarma(x, mean, sigma, logd));
    return rcpp_result_gen;
END_RCPP
}
// mspline2
arma::mat mspline2(arma::colvec x, double tmin, double tmax, arma::colvec tint, int k, bool intercept);
RcppExport SEXP _rcpm_mspline2(SEXP xSEXP, SEXP tminSEXP, SEXP tmaxSEXP, SEXP tintSEXP, SEXP kSEXP, SEXP interceptSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::colvec >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type tmin(tminSEXP);
    Rcpp::traits::input_parameter< double >::type tmax(tmaxSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type tint(tintSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< bool >::type intercept(interceptSEXP);
    rcpp_result_gen = Rcpp::wrap(mspline2(x, tmin, tmax, tint, k, intercept));
    return rcpp_result_gen;
END_RCPP
}
// ispline2
arma::mat ispline2(arma::colvec x, double tmin, double tmax, arma::colvec tint, int k, bool intercept);
RcppExport SEXP _rcpm_ispline2(SEXP xSEXP, SEXP tminSEXP, SEXP tmaxSEXP, SEXP tintSEXP, SEXP kSEXP, SEXP interceptSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::colvec >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type tmin(tminSEXP);
    Rcpp::traits::input_parameter< double >::type tmax(tmaxSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type tint(tintSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< bool >::type intercept(interceptSEXP);
    rcpp_result_gen = Rcpp::wrap(ispline2(x, tmin, tmax, tint, k, intercept));
    return rcpp_result_gen;
END_RCPP
}
// mspline
arma::colvec mspline(double x, double tmin, double tmax, double tint);
RcppExport SEXP _rcpm_mspline(SEXP xSEXP, SEXP tminSEXP, SEXP tmaxSEXP, SEXP tintSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type tmin(tminSEXP);
    Rcpp::traits::input_parameter< double >::type tmax(tmaxSEXP);
    Rcpp::traits::input_parameter< double >::type tint(tintSEXP);
    rcpp_result_gen = Rcpp::wrap(mspline(x, tmin, tmax, tint));
    return rcpp_result_gen;
END_RCPP
}
// ispline
arma::colvec ispline(double x, double tmin, double tmax, double tint);
RcppExport SEXP _rcpm_ispline(SEXP xSEXP, SEXP tminSEXP, SEXP tmaxSEXP, SEXP tintSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type tmin(tminSEXP);
    Rcpp::traits::input_parameter< double >::type tmax(tmaxSEXP);
    Rcpp::traits::input_parameter< double >::type tint(tintSEXP);
    rcpp_result_gen = Rcpp::wrap(ispline(x, tmin, tmax, tint));
    return rcpp_result_gen;
END_RCPP
}
// dmvnrmarma1d
double dmvnrmarma1d(arma::rowvec x, arma::rowvec mean, arma::mat sigma, bool logd);
RcppExport SEXP _rcpm_dmvnrmarma1d(SEXP xSEXP, SEXP meanSEXP, SEXP sigmaSEXP, SEXP logdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::rowvec >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< bool >::type logd(logdSEXP);
    rcpp_result_gen = Rcpp::wrap(dmvnrmarma1d(x, mean, sigma, logd));
    return rcpp_result_gen;
END_RCPP
}
// ScoreInd
double ScoreInd(DataFrame data, double Beta0, double Beta1, double sigma, double mutau, double sigmatau, arma::mat B, List MATmus, int nbnodes, int nd, List newnodes, List newweights, String scorevar, String timevar, String groupvar);
RcppExport SEXP _rcpm_ScoreInd(SEXP dataSEXP, SEXP Beta0SEXP, SEXP Beta1SEXP, SEXP sigmaSEXP, SEXP mutauSEXP, SEXP sigmatauSEXP, SEXP BSEXP, SEXP MATmusSEXP, SEXP nbnodesSEXP, SEXP ndSEXP, SEXP newnodesSEXP, SEXP newweightsSEXP, SEXP scorevarSEXP, SEXP timevarSEXP, SEXP groupvarSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type data(dataSEXP);
    Rcpp::traits::input_parameter< double >::type Beta0(Beta0SEXP);
    Rcpp::traits::input_parameter< double >::type Beta1(Beta1SEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type mutau(mutauSEXP);
    Rcpp::traits::input_parameter< double >::type sigmatau(sigmatauSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type B(BSEXP);
    Rcpp::traits::input_parameter< List >::type MATmus(MATmusSEXP);
    Rcpp::traits::input_parameter< int >::type nbnodes(nbnodesSEXP);
    Rcpp::traits::input_parameter< int >::type nd(ndSEXP);
    Rcpp::traits::input_parameter< List >::type newnodes(newnodesSEXP);
    Rcpp::traits::input_parameter< List >::type newweights(newweightsSEXP);
    Rcpp::traits::input_parameter< String >::type scorevar(scorevarSEXP);
    Rcpp::traits::input_parameter< String >::type timevar(timevarSEXP);
    Rcpp::traits::input_parameter< String >::type groupvar(groupvarSEXP);
    rcpp_result_gen = Rcpp::wrap(ScoreInd(data, Beta0, Beta1, sigma, mutau, sigmatau, B, MATmus, nbnodes, nd, newnodes, newweights, scorevar, timevar, groupvar));
    return rcpp_result_gen;
END_RCPP
}
// transfY
arma::mat transfY(arma::colvec Y, String link, arma::colvec param, List objtransi);
RcppExport SEXP _rcpm_transfY(SEXP YSEXP, SEXP linkSEXP, SEXP paramSEXP, SEXP objtransiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::colvec >::type Y(YSEXP);
    Rcpp::traits::input_parameter< String >::type link(linkSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type param(paramSEXP);
    Rcpp::traits::input_parameter< List >::type objtransi(objtransiSEXP);
    rcpp_result_gen = Rcpp::wrap(transfY(Y, link, param, objtransi));
    return rcpp_result_gen;
END_RCPP
}
// lvsblNCgen
arma::colvec lvsblNCgen(NumericVector param, List data, int nq, NumericVector grp, NumericVector weights, NumericVector nodes, String scorevar, String timevar, String covariate, String age_of_diagnosis, String REadjust, String model, String link, List objtrans, double gamma, bool loglik, bool two_means, bool intercept);
RcppExport SEXP _rcpm_lvsblNCgen(SEXP paramSEXP, SEXP dataSEXP, SEXP nqSEXP, SEXP grpSEXP, SEXP weightsSEXP, SEXP nodesSEXP, SEXP scorevarSEXP, SEXP timevarSEXP, SEXP covariateSEXP, SEXP age_of_diagnosisSEXP, SEXP REadjustSEXP, SEXP modelSEXP, SEXP linkSEXP, SEXP objtransSEXP, SEXP gammaSEXP, SEXP loglikSEXP, SEXP two_meansSEXP, SEXP interceptSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type param(paramSEXP);
    Rcpp::traits::input_parameter< List >::type data(dataSEXP);
    Rcpp::traits::input_parameter< int >::type nq(nqSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type grp(grpSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type nodes(nodesSEXP);
    Rcpp::traits::input_parameter< String >::type scorevar(scorevarSEXP);
    Rcpp::traits::input_parameter< String >::type timevar(timevarSEXP);
    Rcpp::traits::input_parameter< String >::type covariate(covariateSEXP);
    Rcpp::traits::input_parameter< String >::type age_of_diagnosis(age_of_diagnosisSEXP);
    Rcpp::traits::input_parameter< String >::type REadjust(REadjustSEXP);
    Rcpp::traits::input_parameter< String >::type model(modelSEXP);
    Rcpp::traits::input_parameter< String >::type link(linkSEXP);
    Rcpp::traits::input_parameter< List >::type objtrans(objtransSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< bool >::type loglik(loglikSEXP);
    Rcpp::traits::input_parameter< bool >::type two_means(two_meansSEXP);
    Rcpp::traits::input_parameter< bool >::type intercept(interceptSEXP);
    rcpp_result_gen = Rcpp::wrap(lvsblNCgen(param, data, nq, grp, weights, nodes, scorevar, timevar, covariate, age_of_diagnosis, REadjust, model, link, objtrans, gamma, loglik, two_means, intercept));
    return rcpp_result_gen;
END_RCPP
}
// lvsbllin
arma::colvec lvsbllin(NumericVector param, List data, NumericVector grp, String scorevar, String timevar, String link, List objtrans, bool loglik, bool intercept, String covariate);
RcppExport SEXP _rcpm_lvsbllin(SEXP paramSEXP, SEXP dataSEXP, SEXP grpSEXP, SEXP scorevarSEXP, SEXP timevarSEXP, SEXP linkSEXP, SEXP objtransSEXP, SEXP loglikSEXP, SEXP interceptSEXP, SEXP covariateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type param(paramSEXP);
    Rcpp::traits::input_parameter< List >::type data(dataSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type grp(grpSEXP);
    Rcpp::traits::input_parameter< String >::type scorevar(scorevarSEXP);
    Rcpp::traits::input_parameter< String >::type timevar(timevarSEXP);
    Rcpp::traits::input_parameter< String >::type link(linkSEXP);
    Rcpp::traits::input_parameter< List >::type objtrans(objtransSEXP);
    Rcpp::traits::input_parameter< bool >::type loglik(loglikSEXP);
    Rcpp::traits::input_parameter< bool >::type intercept(interceptSEXP);
    Rcpp::traits::input_parameter< String >::type covariate(covariateSEXP);
    rcpp_result_gen = Rcpp::wrap(lvsbllin(param, data, grp, scorevar, timevar, link, objtrans, loglik, intercept, covariate));
    return rcpp_result_gen;
END_RCPP
}
// bilvsblNC
double bilvsblNC(NumericVector param, List data, int nq, bool adapt, NumericVector grp, NumericVector weights, NumericMatrix nodes, List newnodes, List newweights, String scorevar1, String scorevar2, String timevar, String covariate, String REadjust, String model, String link1, String link2, List objtrans1, List objtrans2, double gamma);
RcppExport SEXP _rcpm_bilvsblNC(SEXP paramSEXP, SEXP dataSEXP, SEXP nqSEXP, SEXP adaptSEXP, SEXP grpSEXP, SEXP weightsSEXP, SEXP nodesSEXP, SEXP newnodesSEXP, SEXP newweightsSEXP, SEXP scorevar1SEXP, SEXP scorevar2SEXP, SEXP timevarSEXP, SEXP covariateSEXP, SEXP REadjustSEXP, SEXP modelSEXP, SEXP link1SEXP, SEXP link2SEXP, SEXP objtrans1SEXP, SEXP objtrans2SEXP, SEXP gammaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type param(paramSEXP);
    Rcpp::traits::input_parameter< List >::type data(dataSEXP);
    Rcpp::traits::input_parameter< int >::type nq(nqSEXP);
    Rcpp::traits::input_parameter< bool >::type adapt(adaptSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type grp(grpSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type nodes(nodesSEXP);
    Rcpp::traits::input_parameter< List >::type newnodes(newnodesSEXP);
    Rcpp::traits::input_parameter< List >::type newweights(newweightsSEXP);
    Rcpp::traits::input_parameter< String >::type scorevar1(scorevar1SEXP);
    Rcpp::traits::input_parameter< String >::type scorevar2(scorevar2SEXP);
    Rcpp::traits::input_parameter< String >::type timevar(timevarSEXP);
    Rcpp::traits::input_parameter< String >::type covariate(covariateSEXP);
    Rcpp::traits::input_parameter< String >::type REadjust(REadjustSEXP);
    Rcpp::traits::input_parameter< String >::type model(modelSEXP);
    Rcpp::traits::input_parameter< String >::type link1(link1SEXP);
    Rcpp::traits::input_parameter< String >::type link2(link2SEXP);
    Rcpp::traits::input_parameter< List >::type objtrans1(objtrans1SEXP);
    Rcpp::traits::input_parameter< List >::type objtrans2(objtrans2SEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    rcpp_result_gen = Rcpp::wrap(bilvsblNC(param, data, nq, adapt, grp, weights, nodes, newnodes, newweights, scorevar1, scorevar2, timevar, covariate, REadjust, model, link1, link2, objtrans1, objtrans2, gamma));
    return rcpp_result_gen;
END_RCPP
}
// IndRePostDis
double IndRePostDis(arma::rowvec re, DataFrame data, List rcpmeObj, String scorevar, String timevar, String model, String statutvar, double gamma, String link);
RcppExport SEXP _rcpm_IndRePostDis(SEXP reSEXP, SEXP dataSEXP, SEXP rcpmeObjSEXP, SEXP scorevarSEXP, SEXP timevarSEXP, SEXP modelSEXP, SEXP statutvarSEXP, SEXP gammaSEXP, SEXP linkSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::rowvec >::type re(reSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type data(dataSEXP);
    Rcpp::traits::input_parameter< List >::type rcpmeObj(rcpmeObjSEXP);
    Rcpp::traits::input_parameter< String >::type scorevar(scorevarSEXP);
    Rcpp::traits::input_parameter< String >::type timevar(timevarSEXP);
    Rcpp::traits::input_parameter< String >::type model(modelSEXP);
    Rcpp::traits::input_parameter< String >::type statutvar(statutvarSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< String >::type link(linkSEXP);
    rcpp_result_gen = Rcpp::wrap(IndRePostDis(re, data, rcpmeObj, scorevar, timevar, model, statutvar, gamma, link));
    return rcpp_result_gen;
END_RCPP
}
// IndRePostDis2
double IndRePostDis2(double re, DataFrame data, List rcpmeObj, String scorevar, String timevar, String model, double gamma, String link);
RcppExport SEXP _rcpm_IndRePostDis2(SEXP reSEXP, SEXP dataSEXP, SEXP rcpmeObjSEXP, SEXP scorevarSEXP, SEXP timevarSEXP, SEXP modelSEXP, SEXP gammaSEXP, SEXP linkSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type re(reSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type data(dataSEXP);
    Rcpp::traits::input_parameter< List >::type rcpmeObj(rcpmeObjSEXP);
    Rcpp::traits::input_parameter< String >::type scorevar(scorevarSEXP);
    Rcpp::traits::input_parameter< String >::type timevar(timevarSEXP);
    Rcpp::traits::input_parameter< String >::type model(modelSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< String >::type link(linkSEXP);
    rcpp_result_gen = Rcpp::wrap(IndRePostDis2(re, data, rcpmeObj, scorevar, timevar, model, gamma, link));
    return rcpp_result_gen;
END_RCPP
}
// BivIndRePostDis
double BivIndRePostDis(arma::rowvec re, DataFrame data, List rcpmeObj, String scorevar1, String scorevar2, String timevar, String model, double gamma, String link1, String link2);
RcppExport SEXP _rcpm_BivIndRePostDis(SEXP reSEXP, SEXP dataSEXP, SEXP rcpmeObjSEXP, SEXP scorevar1SEXP, SEXP scorevar2SEXP, SEXP timevarSEXP, SEXP modelSEXP, SEXP gammaSEXP, SEXP link1SEXP, SEXP link2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::rowvec >::type re(reSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type data(dataSEXP);
    Rcpp::traits::input_parameter< List >::type rcpmeObj(rcpmeObjSEXP);
    Rcpp::traits::input_parameter< String >::type scorevar1(scorevar1SEXP);
    Rcpp::traits::input_parameter< String >::type scorevar2(scorevar2SEXP);
    Rcpp::traits::input_parameter< String >::type timevar(timevarSEXP);
    Rcpp::traits::input_parameter< String >::type model(modelSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< String >::type link1(link1SEXP);
    Rcpp::traits::input_parameter< String >::type link2(link2SEXP);
    rcpp_result_gen = Rcpp::wrap(BivIndRePostDis(re, data, rcpmeObj, scorevar1, scorevar2, timevar, model, gamma, link1, link2));
    return rcpp_result_gen;
END_RCPP
}
// BivIndRePostDis2
double BivIndRePostDis2(arma::colvec re, DataFrame data, List rcpmeObj, String scorevar1, String scorevar2, String timevar, String model, double gamma, String link1, String link2);
RcppExport SEXP _rcpm_BivIndRePostDis2(SEXP reSEXP, SEXP dataSEXP, SEXP rcpmeObjSEXP, SEXP scorevar1SEXP, SEXP scorevar2SEXP, SEXP timevarSEXP, SEXP modelSEXP, SEXP gammaSEXP, SEXP link1SEXP, SEXP link2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::colvec >::type re(reSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type data(dataSEXP);
    Rcpp::traits::input_parameter< List >::type rcpmeObj(rcpmeObjSEXP);
    Rcpp::traits::input_parameter< String >::type scorevar1(scorevar1SEXP);
    Rcpp::traits::input_parameter< String >::type scorevar2(scorevar2SEXP);
    Rcpp::traits::input_parameter< String >::type timevar(timevarSEXP);
    Rcpp::traits::input_parameter< String >::type model(modelSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< String >::type link1(link1SEXP);
    Rcpp::traits::input_parameter< String >::type link2(link2SEXP);
    rcpp_result_gen = Rcpp::wrap(BivIndRePostDis2(re, data, rcpmeObj, scorevar1, scorevar2, timevar, model, gamma, link1, link2));
    return rcpp_result_gen;
END_RCPP
}
// jacobi_eigenvalue
List jacobi_eigenvalue(int n, NumericMatrix A, int it_max);
RcppExport SEXP _rcpm_jacobi_eigenvalue(SEXP nSEXP, SEXP ASEXP, SEXP it_maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type A(ASEXP);
    Rcpp::traits::input_parameter< int >::type it_max(it_maxSEXP);
    rcpp_result_gen = Rcpp::wrap(jacobi_eigenvalue(n, A, it_max));
    return rcpp_result_gen;
END_RCPP
}
// moment_method
Rcpp::List moment_method(int n, Rcpp::NumericVector moment);
RcppExport SEXP _rcpm_moment_method(SEXP nSEXP, SEXP momentSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type moment(momentSEXP);
    rcpp_result_gen = Rcpp::wrap(moment_method(n, moment));
    return rcpp_result_gen;
END_RCPP
}
// moments_normal
NumericVector moments_normal(int m, double mu, double sigma);
RcppExport SEXP _rcpm_moments_normal(SEXP mSEXP, SEXP muSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(moments_normal(m, mu, sigma));
    return rcpp_result_gen;
END_RCPP
}
// moments_truncated_normal_ab
NumericVector moments_truncated_normal_ab(int m, double mu, double sigma, double a, double b);
RcppExport SEXP _rcpm_moments_truncated_normal_ab(SEXP mSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(moments_truncated_normal_ab(m, mu, sigma, a, b));
    return rcpp_result_gen;
END_RCPP
}
// moments_truncated_normal_a
NumericVector moments_truncated_normal_a(int m, double mu, double sigma, double a);
RcppExport SEXP _rcpm_moments_truncated_normal_a(SEXP mSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP aSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    rcpp_result_gen = Rcpp::wrap(moments_truncated_normal_a(m, mu, sigma, a));
    return rcpp_result_gen;
END_RCPP
}
// moments_truncated_normal_b
NumericVector moments_truncated_normal_b(int m, double mu, double sigma, double b);
RcppExport SEXP _rcpm_moments_truncated_normal_b(SEXP mSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(moments_truncated_normal_b(m, mu, sigma, b));
    return rcpp_result_gen;
END_RCPP
}
// r8_huge
double r8_huge();
RcppExport SEXP _rcpm_r8_huge() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(r8_huge());
    return rcpp_result_gen;
END_RCPP
}
// r8_mop
double r8_mop(int i);
RcppExport SEXP _rcpm_r8_mop(SEXP iSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    rcpp_result_gen = Rcpp::wrap(r8_mop(i));
    return rcpp_result_gen;
END_RCPP
}
// r8mat_cholesky_factor_upper
NumericMatrix r8mat_cholesky_factor_upper(int n, NumericMatrix a);
RcppExport SEXP _rcpm_r8mat_cholesky_factor_upper(SEXP nSEXP, SEXP aSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type a(aSEXP);
    rcpp_result_gen = Rcpp::wrap(r8mat_cholesky_factor_upper(n, a));
    return rcpp_result_gen;
END_RCPP
}
// r8mat_copy_new
NumericMatrix r8mat_copy_new(int m, int n, NumericMatrix a1);
RcppExport SEXP _rcpm_r8mat_copy_new(SEXP mSEXP, SEXP nSEXP, SEXP a1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type a1(a1SEXP);
    rcpp_result_gen = Rcpp::wrap(r8mat_copy_new(m, n, a1));
    return rcpp_result_gen;
END_RCPP
}
// r8mat_diag_get_vector
NumericVector r8mat_diag_get_vector(int n, NumericMatrix a);
RcppExport SEXP _rcpm_r8mat_diag_get_vector(SEXP nSEXP, SEXP aSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type a(aSEXP);
    rcpp_result_gen = Rcpp::wrap(r8mat_diag_get_vector(n, a));
    return rcpp_result_gen;
END_RCPP
}
// r8mat_identity
NumericMatrix r8mat_identity(int n);
RcppExport SEXP _rcpm_r8mat_identity(SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(r8mat_identity(n));
    return rcpp_result_gen;
END_RCPP
}
// truncated_normal_ab_moment
double truncated_normal_ab_moment(int order, double mu, double s, double a, double b);
RcppExport SEXP _rcpm_truncated_normal_ab_moment(SEXP orderSEXP, SEXP muSEXP, SEXP sSEXP, SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type order(orderSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type s(sSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(truncated_normal_ab_moment(order, mu, s, a, b));
    return rcpp_result_gen;
END_RCPP
}
// truncated_normal_a_moment
double truncated_normal_a_moment(int order, double mu, double sigma, double a);
RcppExport SEXP _rcpm_truncated_normal_a_moment(SEXP orderSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP aSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type order(orderSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    rcpp_result_gen = Rcpp::wrap(truncated_normal_a_moment(order, mu, sigma, a));
    return rcpp_result_gen;
END_RCPP
}
// truncated_normal_b_moment
double truncated_normal_b_moment(int order, double mu, double sigma, double b);
RcppExport SEXP _rcpm_truncated_normal_b_moment(SEXP orderSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type order(orderSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(truncated_normal_b_moment(order, mu, sigma, b));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_rcpm_dn", (DL_FUNC) &_rcpm_dn, 3},
    {"_rcpm_dmvnrmarma", (DL_FUNC) &_rcpm_dmvnrmarma, 4},
    {"_rcpm_mspline2", (DL_FUNC) &_rcpm_mspline2, 6},
    {"_rcpm_ispline2", (DL_FUNC) &_rcpm_ispline2, 6},
    {"_rcpm_mspline", (DL_FUNC) &_rcpm_mspline, 4},
    {"_rcpm_ispline", (DL_FUNC) &_rcpm_ispline, 4},
    {"_rcpm_dmvnrmarma1d", (DL_FUNC) &_rcpm_dmvnrmarma1d, 4},
    {"_rcpm_ScoreInd", (DL_FUNC) &_rcpm_ScoreInd, 15},
    {"_rcpm_transfY", (DL_FUNC) &_rcpm_transfY, 4},
    {"_rcpm_lvsblNCgen", (DL_FUNC) &_rcpm_lvsblNCgen, 18},
    {"_rcpm_lvsbllin", (DL_FUNC) &_rcpm_lvsbllin, 10},
    {"_rcpm_bilvsblNC", (DL_FUNC) &_rcpm_bilvsblNC, 20},
    {"_rcpm_IndRePostDis", (DL_FUNC) &_rcpm_IndRePostDis, 9},
    {"_rcpm_IndRePostDis2", (DL_FUNC) &_rcpm_IndRePostDis2, 8},
    {"_rcpm_BivIndRePostDis", (DL_FUNC) &_rcpm_BivIndRePostDis, 10},
    {"_rcpm_BivIndRePostDis2", (DL_FUNC) &_rcpm_BivIndRePostDis2, 10},
    {"_rcpm_jacobi_eigenvalue", (DL_FUNC) &_rcpm_jacobi_eigenvalue, 3},
    {"_rcpm_moment_method", (DL_FUNC) &_rcpm_moment_method, 2},
    {"_rcpm_moments_normal", (DL_FUNC) &_rcpm_moments_normal, 3},
    {"_rcpm_moments_truncated_normal_ab", (DL_FUNC) &_rcpm_moments_truncated_normal_ab, 5},
    {"_rcpm_moments_truncated_normal_a", (DL_FUNC) &_rcpm_moments_truncated_normal_a, 4},
    {"_rcpm_moments_truncated_normal_b", (DL_FUNC) &_rcpm_moments_truncated_normal_b, 4},
    {"_rcpm_r8_huge", (DL_FUNC) &_rcpm_r8_huge, 0},
    {"_rcpm_r8_mop", (DL_FUNC) &_rcpm_r8_mop, 1},
    {"_rcpm_r8mat_cholesky_factor_upper", (DL_FUNC) &_rcpm_r8mat_cholesky_factor_upper, 2},
    {"_rcpm_r8mat_copy_new", (DL_FUNC) &_rcpm_r8mat_copy_new, 3},
    {"_rcpm_r8mat_diag_get_vector", (DL_FUNC) &_rcpm_r8mat_diag_get_vector, 2},
    {"_rcpm_r8mat_identity", (DL_FUNC) &_rcpm_r8mat_identity, 1},
    {"_rcpm_truncated_normal_ab_moment", (DL_FUNC) &_rcpm_truncated_normal_ab_moment, 5},
    {"_rcpm_truncated_normal_a_moment", (DL_FUNC) &_rcpm_truncated_normal_a_moment, 4},
    {"_rcpm_truncated_normal_b_moment", (DL_FUNC) &_rcpm_truncated_normal_b_moment, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_rcpm(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
